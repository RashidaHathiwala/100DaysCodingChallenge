/*
Satisfy the equation

Given an array A[ ] of N of  integers, find the index of values that satisfy A + B = C + D where A,B,C & D are integers values in the array.
Note: As there may be multiple pairs satisfying the equation return lexicographically smallest order of  A, B, C and D and return all as -1 if there are no pairs satisfying the equation.



Example 1:

Input:
N = 7
A[] = {3, 4, 7, 1, 2, 9, 8}
Output:
0 2 3 5
Explanation:
A[0] + A[2] = 3+7 = 10
A[3] + A[5] = 1+9 = 10
Example 2:

Input:
N = 4
A[] = {424, 12, 31, 7}
Output:
-1 -1 -1 -1
Explanation:
There are no pairs satisfying the equation.


Your Task:
You don't need to read input or print anything. Your task is to complete the function satisfyEqn() which takes an Integer N and an array A[] of size N as input and returns a vector of 4 integers denoting A, B, C, and D respectively.



Expected Time Complexity: O(N2*logN2)
Expected Auxiliary Space: O(N2)



Constraints:
1 <= N <= 500
1 <= A[i] <= 105
*/

//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N = Integer.parseInt(read.readLine());

            String S[] = read.readLine().split(" ");
            int[] A = new int[N];

            for(int i=0; i<N; i++)
                A[i] = Integer.parseInt(S[i]);

            Solution ob = new Solution();
            int[] ptr = ob.satisfyEqn(A,N);

            System.out.println(ptr[0] + " " + ptr[1] + " " + ptr[2] + " " + ptr[3]);
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int[] satisfyEqn(int[] A, int N) {
        // code here
         int len = A.length;
        for (int i=0; i<len; i++) {
            for (int j=0; j<len; j++) {
                for (int k=0; k<len; k++) {
                    for (int l=0; l<len; l++) {
                        int sum1 = A[i]+A[j];
                        int sum2 = A[k]+A[l];
                        if (sum1 == sum2 && i != j && j != k && k != l && i 
                                            != k && i != l && j != l)
                            return new int[]{i, j, k, l};
                    } 
                }
            }
        }
        return new int[]{-1,-1,-1,-1};
    }
};
